[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "animal-api"
version = "1.0.0"
description = "Animal API with FastAPI"
authors = [{name = "Your Name", email = "your.email@example.com"}]
requires-python = ">=3.8"
dependencies = [
    "fastapi==0.116.1",
    "uvicorn==0.24.0",
    "aiohttp==3.9.1",
    "pydantic==2.11.7"
]

[tool.setuptools]
py-modules = ["main", "utils", "run_server"]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "black>=23.12.0",
    "flake8>=6.0.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    "bandit>=1.7.5",
    "pre-commit>=3.6.0"
]

# Black - Code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

# isort - Import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["main", "utils", "error_handler"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = ["*.git", "*.mypy_cache", "*.tox", "*.venv", "build", "dist"]
force_alphabetical_sort_within_sections = true
combine_as_imports = true
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Flake8 - Python linting
[tool.flake8]
max-line-length = 88
max-complexity = 10
ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator (conflicts with black)
]
exclude = [
    ".git",
    "__pycache__",
    ".venv/*",
    "venv/*",
    "build",
    "dist",
    "*.egg-info",
    "htmlcov",
    ".pytest_cache",
    ".mypy_cache"
]
per-file-ignores = [
    "test_*.py:F401,F811",  # Allow unused imports in tests
]

# MyPy - Static type checking (simplified)
[tool.mypy]
python_version = "3.8"
ignore_missing_imports = true
show_error_codes = true
strict = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Bandit - Security linting
[tool.bandit]
exclude_dirs = ["tests", "test_*.py"]
skips = ["B101", "B601", "B104"]  # Skip assert, shell injection, and hardcoded bind all interfaces tests

# Coverage.py
[tool.coverage.run]
source = ["."]
omit = [
    "test_*.py",
    "*_test.py",
    "tests/*",
    "conftest.py",
    "setup.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "__pycache__/*"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\(Protocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2
fail_under = 40

# Pytest
[tool.pytest.ini_options]
testpaths = ["."]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--color=yes",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=40",
    "--durations=10"
]
asyncio_mode = "auto"
markers = [
    "asyncio: marks tests as async",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "slow: marks tests as slow running"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
