version: '3.8'

services:
  # Main API service
  animal-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: animal-api-server
    ports:
      - "8000:8000"
    environment:
      - ANIMALS_API_BASE_URL=http://localhost:3123
      - MAX_CONCURRENT_REQUESTS=10
      - LOG_LEVEL=INFO
    volumes:
      # Mount logs directory for persistent logging
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - animal-api-network

  # Development service with hot reloading
  animal-api-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: animal-api-dev
    ports:
      - "8000:8000"
    environment:
      - ANIMALS_API_BASE_URL=http://localhost:3123
      - MAX_CONCURRENT_REQUESTS=10
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
    volumes:
      # Mount source code for hot reloading
      - .:/app
      - ./logs:/app/logs
    restart: unless-stopped
    profiles:
      - dev
    networks:
      - animal-api-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: animal-api-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    profiles:
      - cache
    networks:
      - animal-api-network

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: animal-api-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - animal-api
    restart: unless-stopped
    profiles:
      - production
    networks:
      - animal-api-network

networks:
  animal-api-network:
    driver: bridge
    name: animal-api-network

volumes:
  redis-data:
    name: animal-api-redis-data
